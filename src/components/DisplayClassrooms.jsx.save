// src/components/DisplayClassrooms.jsx

import React, { useState, useEffect } from "react";
import { db } from "../firebase/firebaseConfig";
import { collection, getDocs } from "firebase/firestore";

function DisplayClassrooms() {
  const [classrooms, setClassrooms] = useState([]);
  const [filteredClassrooms, setFilteredClassrooms] = useState([]);
  const [loading, setLoading] = useState(true);

  // Filter states
  const [searchQuery, setSearchQuery] = useState("");
  const [buildingFilter, setBuildingFilter] = useState("");
  const [minCapacity, setMinCapacity] = useState("");
  const [startTime, setStartTime] = useState("");
  const [duration, setDuration] = useState("");
  const [days, setDays] = useState([]);
  const [times, setTimes] = useState([]);

  useEffect(() => {
    const fetchClassrooms = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "classrooms"));
        const classroomData = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setClassrooms(classroomData);
        setFilteredClassrooms(classroomData); // Initialize filtered list
        setLoading(false);

        // Extract unique times and days (if your data has "days" and "times" arrays)
        const uniqueDays = [
          ...new Set(classroomData.flatMap((room) => room.days || [])),
        ];
        const uniqueTimes = [
          ...new Set(classroomData.flatMap((room) => room.times || [])),
        ];

        setDays(uniqueDays);
        setTimes(uniqueTimes);
      } catch (error) {
        console.error("Error fetching classrooms:", error);
        setLoading(false);
      }
    };

    fetchClassrooms();
  }, []);

  // Filter logic
  useEffect(() => {
    let filtered = classrooms.filter((room) => {
      const matchesQuery = room.roomName
        .toLowerCase()
        .includes(searchQuery.toLowerCase());
      const matchesBuilding = buildingFilter
        ? room.building.toLowerCase() === buildingFilter.toLowerCase()
        : true;
      const matchesCapacity = minCapacity
        ? room.capacity >= parseInt(minCapacity)
        : true;

      // If you store schedules in room.schedule
      // and each schedule entry has "start" and "end" times:
      const matchesTime =
        startTime && duration
          ? room.schedule?.some((entry) => {
              const roomStart = entry.start;
              const roomEnd = entry.end;
              const selectedEndTime = parseInt(startTime) + parseInt(duration);
              return (
                parseInt(startTime) >= roomStart && selectedEndTime <= roomEnd
              );
            })
          : true;

      return (
        matchesQuery && matchesBuilding && matchesCapacity && matchesTime
      );
    });

    setFilteredClassrooms(filtered);
  }, [searchQuery, buildingFilter, minCapacity, startTime, duration, classrooms]);

  if (loading) {
    return <p className="text-center mt-8">Loading classrooms...</p>;
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h2 className="text-2xl font-bold text-center mb-6">
        Available Classrooms
      </h2>

      {/* Filter Section */}
      <div className="flex flex-wrap justify-center gap-4 mb-8">
        {/* Search by Room Name */}
        <input
          type="text"
          placeholder="Search by Room Name"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="border border-gray-300 rounded px-3 py-2 focus:outline-none"
        />

        {/* Building Filter */}
        <select
          value={buildingFilter}
          onChange={(e) => setBuildingFilter(e.target.value)}
          className="border border-gray-300 rounded px-3 py-2 focus:outline-none"
        >
          <option value="">All Buildings</option>
          {[...new Set(classrooms.map((room) => room.building))].map(
            (building, index) => (
              <option key={index} value={building}>
                {building}
              </option>
            )
          )}
        </select>

        {/* Min Capacity */}
        <input
          type="number"
          placeholder="Min Capacity"
          value={minCapacity}
          onChange={(e) => setMinCapacity(e.target.value)}
          className="border border-gray-300 rounded px-3 py-2 focus:outline-none"
        />

        {/* Start Time */}
        <select
          value={startTime}
          onChange={(e) => setStartTime(e.target.value)}
          className="border border-gray-300 rounded px-3 py-2 focus:outline-none"
        >
          <option value="">Select Start Time</option>
          {Array.isArray(times) &&
            times.map((time, index) => (
              <option key={index} value={time}>
                {time}
              </option>
            ))}
        </select>

        {/* Duration */}
        <input
          type="number"
          placeholder="Duration (hours)"
          value={duration}
          onChange={(e) => setDuration(e.target.value)}
          className="border border-gray-300 rounded px-3 py-2 focus:outline-none"
        />

        {/* Days */}
        <select
          value=""
          onChange={(e) => setDays(e.target.value)} // Not sure how you handle day selection
          className="border border-gray-300 rounded px-3 py-2 focus:outline-none"
        >
          <option value="">Select Day</option>
          {Array.isArray(days) &&
            days.map((day, index) => (
              <option key={index} value={day}>
                {day}
              </option>
            ))}
        </select>
      </div>

      {/* Classroom List */}
      {filteredClassrooms.length > 0 ? (
        <ul className="space-y-4">
          {filteredClassrooms.map((room) => (
            <li
              key={room.id}
              className="border border-gray-300 rounded p-4 shadow-sm"
            >
              <p className="font-semibold">
                <span className="text-gray-700">Room:</span> {room.roomName}
              </p>
              <p>
                <span className="text-gray-700 font-semibold">Building:</span>{" "}
                {room.building}
              </p>
              <p>
                <span className="text-gray-700 font-semibold">Capacity:</span>{" "}
                {room.capacity}
              </p>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-center text-gray-600">
          No classrooms found matching criteria.
        </p>
      )}
    </div>
  );
}

export default DisplayClassrooms;
